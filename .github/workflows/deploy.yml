name: Deploy

on:
  push:
    branches: [master]
    tags:
      - "v*"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # TODO: Install Emacs
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          profile: minimal
          toolchain: nightly-2023-01-27
      - name: Checkout Repo
        uses: actions/checkout@v3
      # TODO: Tangle .org files using Emacs
      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test

  deploy-linux:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      # TODO: Install Emacs
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          profile: minimal
          toolchain: nightly-2023-01-27
          override: true
      - name: Checkout Repo
        uses: actions/checkout@v3
      # TODO: Tangle .org files using Emacs
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Create tarball
        run: |
          mkdir -p target/tarball/x86_64
          cp target/release/majestic-lisp target/tarball/x86_64/
          cp man/man1/majestic.1 target/tarball/x86_64/
          cd target/tarball/x86_64 \
          && tar -czvf ../../majestic-lisp-x86_64.tar.gz .
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: builds
          path: ./target/majestic-lisp-x86_64.tar.gz

  deploy-windows:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      # TODO: Install Emacs
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install p7zip-full groff
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          profile: minimal
          toolchain: nightly-2023-01-27
          target: x86_64-pc-windows-gnu
          override: true
      - name: Checkout Repo
        uses: actions/checkout@v3
      # TODO: Tangle .org files using Emacs
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target x86_64-pc-windows-gnu --release --features dumb_terminal
      - name: Create zip
        run: |
          man -M man -Tpdf 1 majestic >"man/majestic(1).pdf"
          mkdir -p target/zip
          cp target/x86_64-pc-windows-gnu/release/majestic-lisp.exe target/zip/
          cp "man/majestic(1).pdf" target/zip/
          cd target/zip \
          && 7z a ../majestic-lisp-win64.zip .
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: builds
          path: ./target/majestic-lisp-win64.zip
    
  deploy-wasi:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          profile: minimal
          toolchain: nightly-2023-01-27
      - name: Install Cargo WASI
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-wasi
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: wasi
          args: build --release
      - name: Create tarball
        run: |
          mkdir -p target/tarball/wasm32-wasi
          cp target/wasm32-wasi/release/majestic-lisp.wasm target/tarball/wasm32-wasi/
          cp man/man1/majestic.1 target/tarball/wasm32-wasi/
          cd target/tarball/wasm32-wasi \
          && tar -czvf ../../majestic-lisp-wasm32-wasi.tar.gz .
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: builds
          path: ./target/majestic-lisp-wasm32-wasi.tar.gz

  release:
    # Run only for tags
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: [deploy-linux, deploy-windows, deploy-wasi]
    steps:
      - name: Recover artifacts
        uses: actions/download-artifact@v2
      - name: Create a release
        id: release_step
        uses: ncipollo/release-action@v1
        with:
          artifacts: "builds/majestic-lisp-x86_64.tar.gz,builds/majestic-lisp-win64.zip,builds/majestic-lisp-wasm32-wasi.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

  wapm-release:
    # Run only for tags
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: [deploy-wasi]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Recover artifacts
        uses: actions/download-artifact@v2
      - name: Reposition generated WASM file
        run: |
          mkdir -p target/wasm32-wasi/release/
          tar zxvf builds/majestic-lisp-wasm32-wasi.tar.gz
          mv majestic-lisp.wasm target/wasm32-wasi/release/
      - name: Setup Wasmer
        uses: wasmerio/setup-wasmer@v1
      - name: Publish to WAPM
        uses: wasmerio/wapm-publish@v1
        with:
          username: ${{ secrets.WAPM_USERNAME }}
          password: ${{ secrets.WAPM_PASSWORD }}
